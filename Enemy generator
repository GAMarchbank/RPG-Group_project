# REQUIRES "player_data.txt" and "game_data.txt" files to function.

"""
This enemy stat calculator consists of:
(1) a section to import data from the "player_data.txt and the "game_data.txt" files ,
(2) a function to determine the enemy level based on the player's level,
(3) a function to calculate the enemy loot drops, 
(4) a function to bring it all together into the "enemy stats" dictionary,
(5) a few lines of code to upload the enemy stats into a JSON file, then open said file.

--------------------------------------------------------------------------------------------------------------------
"""

import json
import random

# This segment parses the "player_data.txt" file for the playerstats_dict and pulls the player's level and location

with open('player_data.txt') as json_file:
    playerstats = json.load(json_file)
    
player_level = playerstats.get('level')


player_location = playerstats.get('location')

# this section parses the "game_data.txt" file for the "personality" list:    

with open ('game_data.txt') as json_file:
    gamedata = json.load(json_file)
    
    
personality_list = gamedata.get('personality_types')

personality = random.choice(personality_list)

attacks = gamedata.get("attacks")





#--------------------------------------------------------------------------------------------------------------

# Below is the level calculator (crude, i know).


def enemy_level_calculator(player_level):
        
    
    
    if player_level == 1:
        enemy_level = 1
    elif player_level >= 2 and player_level <= 3:
        enemy_level = random.choice([1,2,2,2,3,3,3,4])
    elif player_level > 3 and player_level <= 5:
        enemy_level = random.choice([2,3,3,4,4,4,5,5,6])
    elif player_level > 5 and player_level <=7:
        enemy_level = random.choice([4,5,5,6,6,6,7,7,8])
    elif player_level > 7 and player_level <=9:
        enemy_level = random.choice([6,7,7,8,8,8,9,9,10])
    elif player_level == 10:
        enemy_level = random.choice([8,9,9,10,10,10])
    else:
        print("Error calculating enemy strength.")
    
    return enemy_level


# below is the loot calculator. It calculates the loot drop based upon a "base" drop chance for each item multiplied by the enemy level --------------------
    
def loot_calculator(enemy_level):
    
    drop_base_probability = {"Gold Coin":2,"Silver Coin":4, "Bronze Coin":8,"Healing potion":4,"Greater Healing potion":1}
        
    lootlist = list()
    
    
    for item in drop_base_probability:
        
        probability_calculator = drop_base_probability.get(item)
    
        probability_score = (int(probability_calculator) * int(enemy_level))
        
        num_generator = random.randint(0,100)
        if num_generator >= probability_score:
            pass
        else:
            lootlist.append(item)
    
    if bool(lootlist) == False:
        lootlist = ["None"]
    else:
        return lootlist
    
# below is the enemy stat calculator. It uses the player location and all of the previous functions to generate an appropriate enemy (and loot) ----------------

def enemy_stat_calculator(player_level, player_location):
      
        
    monster_locations_dict = {
    
    "Desert" : ["Scarab Beetle","Scorpion", "Giant Sandworm"],
    
    "Haunted Castle" : ["Possessed Armour", "Ghost","Gargoyle"],
    
    "Swamp" : ["Goblin", "Living Slime", "Witch"],
    
    "Forest" : ["Spider", "Ogre", "Carnivorous Tree"]
    
    }
    
    monster_location = player_location
    
    all_local_monsters = monster_locations_dict.get(player_location)
            
    
    
    monster_type = random.choice(all_local_monsters)
    
    
    
    """
    
    ---------This is the old attack list from the original enemy generator, probably not needed anymore.----------------
    
    attacks_dict = {
        
    
    "Scarab Beetle": {"Bite":1,"Sting":2,"Swarm":3},
    "Scorpion": {"Bite":1, "Claw":2, "Sting":3},
    "Giant Sandworm":{"Rush":1,"Roar":2,"Slam":3},
    "Possessed Armour":{"Shield Bash":1,"Stab":2,"Overhead Strike":3},
    "Ghost":{"Scare":1,"Swoop":2,"Ectoplasm":3},
    "Gargoyle":{"Murderous stare":1,"Swoop":2,"Stone fist":3},
    "Goblin":{"Slash":1,"Stab":2,"Poisoned blade":3},
    "Living Slime":{"Slime":1,"Regurgitate":2,"Poison spit":3},
    "Witch":{"Broom rush":1,"Finger snap":2,"Balefire":3},
    "Spider": {"Web":1,"Pounce":2,"Envenom":3},
    "Ogre":{"Stomp":1,"Crushing blow":2,"Flatten":3},
    "Carnivorous Tree":{"Vine lash":1,"Pollen Cloud":2,"Nettle":3}
    
    }
   ----------------------------------------------------------------------------------------------------------------------- 
    """
    
# These placeholder enemy stat calculations (aside from enemy level) are deliberately basic until a better system is decided upon.
    
    enemy_level = enemy_level_calculator(player_level)
    
    hitpoints = 5 + enemy_level
    attackpoints = enemy_level
    defencepoints = enemy_level
    speedpoints = enemy_level
    aim = enemy_level
    
    
    
    enemy_stats = {"enemy": monster_type, "level":enemy_level, "location": (player_location), "personality": personality,"loot": loot_calculator(enemy_level), "hitpoints": hitpoints, "attack points": attackpoints, "defence points": defencepoints, "speed points": speedpoints, "aim": aim, "attacks": attacks}
    
    return enemy_stats


# This next section creates a JSON file called 'enemy_data.txt', then opens it to see the contents.-------------------------------------------


generated_enemy = enemy_stat_calculator(player_level,player_location)

with open('enemy_data.txt', 'w') as outfile:
    json.dump(generated_enemy, outfile)
    

with open('enemy_data.txt', 'r') as infile:
    enemy_data = json.load(infile)

print(enemy_data)
